// lfsr258.h: L'Ecuyer's 64-bit Linear Feedback Shift Register RNG
// Period is (2^63 - 1)(2^55 - 1)(2^52 - 1)(2^47 - 1)(2^41 - 1) =
// 463168356949050750352076184268918090343706927944462529355293134289296410279935 or approximately 2^258
// Author: Pierre L'Ecuyer,
// Source: http://www.iro.umontreal.ca/~lecuyer/myftp/papers/tausme2.ps
// R. Saucier, 24 August 2016

#ifndef LFSR258_H
#define LFSR258_H

namespace LFSR258 {

static const uint64_t N_SEEDS = 5;
static const bitmatrix64_t MATRIX[N_SEEDS] = {
   {
      {
         0x0000000000000000, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000, 0x0000000000010000, 0x0000000000020000,
         0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000, 0x0000000001000000, 0x0000000002000000,
         0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000, 0x0000000100000000, 0x0000000200000000,
         0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000, 0x0000010000000000, 0x0000020000000000,
         0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000, 0x0001000000000000, 0x0002000000000000,
         0x0004000000000000, 0x0008000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000000, 0x0100000000000000, 0x0200000000000000,
         0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000001, 0x8000000000000003, 0x0000000000000006, 0x000000000000000c,
         0x0000000000000018, 0x0000000000000030, 0x0000000000000060, 0x00000000000000c0, 0x0000000000000180, 0x0000000000000300, 0x0000000000000600, 0x0000000000000400
      }
   },
   {
      {
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0000000000004000, 0x0000000000008000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000,
         0x0000000000200000, 0x0000000000400000, 0x0000000000800000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000,
         0x0000000020000000, 0x0000000040000000, 0x0000000080000001, 0x0000000100000002, 0x0000000200000004, 0x0000000400000008, 0x0000000800000010, 0x0000001000000020,
         0x0000002000000040, 0x0000004000000080, 0x0000008000000100, 0x0000010000000200, 0x0000020000000400, 0x0000040000000800, 0x0000080000001000, 0x0000100000002000,
         0x0000200000000000, 0x0000400000000000, 0x0000800000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000000,
         0x0020000000000000, 0x0040000000000000, 0x0080000000000001, 0x0100000000000002, 0x0200000000000004, 0x0400000000000008, 0x0800000000000010, 0x1000000000000020,
         0x2000000000000040, 0x4000000000000080, 0x8000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000
      }
   },
   {
      {
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000,
         0x0000200000000000, 0x0000400000000000, 0x0000800000000000, 0x0001000000000000, 0x0002000000000001, 0x0004000000000002, 0x0008000000000004, 0x0010000000000009,
         0x0020000000000012, 0x0040000000000024, 0x0080000000000048, 0x0100000000000090, 0x0200000000000120, 0x0400000000000240, 0x0800000000000480, 0x1000000000000900,
         0x2000000000001200, 0x4000000000002400, 0x8000000000004800, 0x0000000000009000, 0x0000000000012000, 0x0000000000024000, 0x0000000000048000, 0x0000000000090000,
         0x0000000000120000, 0x0000000000240000, 0x0000000000480000, 0x0000000000900000, 0x0000000001200000, 0x0000000002400000, 0x0000000004800000, 0x0000000009000000,
         0x0000000012000000, 0x0000000024000000, 0x0000000048000000, 0x0000000090000000, 0x0000000120000000, 0x0000000240000000, 0x0000000480000000, 0x0000000900000000,
         0x0000001200000000, 0x0000002400000000, 0x0000004800000000, 0x0000009000000000, 0x0000012000000000, 0x0000004000000000, 0x0000008000000000, 0x0000010000000000
      }
   },
   {
      {
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000001, 0x0000080000000002, 0x0000100000000004, 0x0000200000000008, 0x0000400000000010,
         0x0000800000000021, 0x0001000000000042, 0x0002000000000084, 0x0004000000000108, 0x0008000000000210, 0x0010000000000420, 0x0020000000000840, 0x0040000000001080,
         0x0080000000002100, 0x0100000000004200, 0x0200000000008400, 0x0400000000010800, 0x0800000000021000, 0x1000000000042000, 0x2000000000084000, 0x4000000000108000,
         0x8000000000210000, 0x0000000000420000, 0x0000000000840000, 0x0000000001080000, 0x0000000002100000, 0x0000000004200000, 0x0000000008400000, 0x0000000010800000,
         0x0000000021000000, 0x0000000042000000, 0x0000000084000000, 0x0000000108000000, 0x0000000210000000, 0x0000000420000000, 0x0000000840000000, 0x0000001080000000,
         0x0000002100000000, 0x0000004200000000, 0x0000008400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000000, 0x0000008000000000
      }
   },
   {
      {
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000080000000,
         0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000001, 0x0000008000000002,
         0x0000010000000004, 0x0000020000000009, 0x0000040000000012, 0x0000080000000024, 0x0000100000000048, 0x0000200000000090, 0x0000400000000120, 0x0000800000000240,
         0x0001000000000480, 0x0002000000000900, 0x0004000000001200, 0x0008000000002400, 0x0010000000004800, 0x0020000000009000, 0x0040000000012000, 0x0080000000024000,
         0x0100000000048000, 0x0200000000090000, 0x0400000000120000, 0x0800000000240000, 0x1000000000480000, 0x2000000000900000, 0x4000000001200000, 0x8000000002400000,
         0x0000000004800000, 0x0000000009000000, 0x0000000012000000, 0x0000000024000000, 0x0000000048000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000
      }
   }
};
static const bitmatrix64_t MATRIX_INV[N_SEEDS] = {
   {
      {
         0x0000000000000001, 0xffc0000000000000, 0xff80000000000000, 0xff00000000000000, 0xfe00000000000000, 0xfc00000000000000, 0xf800000000000000, 0xf000000000000000,
         0xe000000000000000, 0xc000000000000000, 0x8000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020,
         0x0000000000000040, 0x0000000000000080, 0x0000000000000100, 0x0000000000000200, 0x0000000000000400, 0x0000000000000800, 0x0000000000001000, 0x0000000000002000,
         0x0000000000004000, 0x0000000000008000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000,
         0x0000000000400000, 0x0000000000800000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000,
         0x0000000040000000, 0x0000000080000000, 0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000,
         0x0000004000000000, 0x0000008000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000, 0x0000080000000000, 0x0000100000000000, 0x0000200000000000,
         0x0000400000000000, 0x0000800000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000, 0x0008000000000000, 0x0010000000000001, 0xffe0000000000001
      }
   },
   {
      {
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0800000000000010, 0x1000000000000020, 0x2000000000000040, 0x4000000000000080, 0x8000000000000100, 0x0000000000000200, 0x0000000000000400,
         0x0000000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000,
         0x0000000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000,
         0x0000000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000001, 0x0000000100000002, 0x0000000200000004, 0x0000000400000008,
         0x0800000800000000, 0x1000001000000000, 0x2000002000000000, 0x4000004000000000, 0x8000008000000000, 0x0000010000000000, 0x0000020000000000, 0x0000040000000000,
         0x0000080000000000, 0x0000100000000000, 0x0000200000000000, 0x0000400000000000, 0x0000800000000000, 0x0001000000000000, 0x0002000000000000, 0x0004000000000000,
         0x0008000000000000, 0x0010000000000000, 0x0020000000000000, 0x0040000000000000, 0x0080000000000001, 0x0100000000000002, 0x0200000000000004, 0x0400000000000008
      }
   },
   {
      {
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x4924924800000000, 0x9249249000000000, 0x2492492000000000, 0x4924924000000000,
         0x9249248000000000, 0x2492490000000000, 0x4924920000000000, 0x9249240000000000, 0x2492480000000000, 0x4924900000000000, 0x9249200000000000, 0x2492400000000000,
         0x4924800000000000, 0x9249000000000000, 0x2492000000000000, 0x4924000000000000, 0x9248000000000000, 0x2490000000000001, 0x4920000000000002, 0x9240000000000004,
         0x2480000000000008, 0x4900000000000010, 0x9200000000000020, 0x2400000000000040, 0x4800000000000080, 0x9000000000000100, 0x2000000000000200, 0x4000000000000400,
         0x8000000000000800, 0x0000000000001000, 0x0000000000002000, 0x0000000000004000, 0x0000000000008000, 0x0000000000010000, 0x0000000000020000, 0x0000000000040000,
         0x0000000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000, 0x0000000001000000, 0x0000000002000000, 0x0000000004000000,
         0x0000000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000, 0x4924924900000000, 0x9249249200000000, 0x2492492400000000
      }
   },
   {
      {
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x2108420000000000, 0x4210840000000000, 0x8421080000000000, 0x0842100000000000, 0x1084200000000000, 0x2108400000000000, 0x4210800000000001,
         0x8421000000000002, 0x0842000000000004, 0x1084000000000008, 0x2108000000000010, 0x4210000000000020, 0x8420000000000040, 0x0840000000000080, 0x1080000000000100,
         0x2100000000000200, 0x4200000000000400, 0x8400000000000800, 0x0800000000001000, 0x1000000000002000, 0x2000000000004000, 0x4000000000008000, 0x8000000000010000,
         0x0000000000020000, 0x0000000000040000, 0x0000000000080000, 0x0000000000100000, 0x0000000000200000, 0x0000000000400000, 0x0000000000800000, 0x0000000001000000,
         0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000, 0x0000000100000000,
         0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x2108421000000000, 0x4210842000000000, 0x8421084000000000, 0x0842108000000000, 0x1084210000000000
      }
   },
   {
      {
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
         0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x4900000000008000,
         0x9200000000010000, 0x2400000000020000, 0x4800000000040000, 0x9000000000080000, 0x2000000000100000, 0x4000000000200000, 0x8000000000400000, 0x0000000000800000,
         0x0000000001000000, 0x0000000002000000, 0x0000000004000000, 0x0000000008000000, 0x0000000010000000, 0x0000000020000000, 0x0000000040000000, 0x0000000080000000,
         0x0000000100000000, 0x0000000200000000, 0x0000000400000000, 0x0000000800000000, 0x0000001000000000, 0x0000002000000000, 0x0000004000000001, 0x0000008000000002,
         0x0000010000000004, 0x0000020000000009, 0x0000040000000012, 0x0000080000000024, 0x0000100000000048, 0x0000200000000090, 0x0000400000000120, 0x0000800000000240,
         0x0001000000000480, 0x0002000000000900, 0x0004000000001200, 0x0008000000002400, 0x0010000000004800, 0x4920000000001000, 0x9240000000002000, 0x2480000000004000
      }
   }
};
static const uint64_t C0 = 0xffffffffffffffffull;   // 18446744073709551615ull
static const uint64_t C1 = 0xfffffffffffffffeull;   // 18446744073709551614ull
static const uint64_t C2 = 0xfffffffffffffe00ull;   // 18446744073709551104ull
static const uint64_t C3 = 0xfffffffffffff000ull;   // 18446744073709547520ull
static const uint64_t C4 = 0xfffffffffffe0000ull;   // 18446744073709420544ull
static const uint64_t C5 = 0xffffffffff800000ull;   // 18446744073701163008ull

class lfsr258 : public Generator<uint64_t> {

public:
   lfsr258( void ) { // default constructor
   }
   
   lfsr258( std::vector<uint64_t> seed ) { // constructor from vector seed
   
      setState( seed );
   }
   
   virtual ~lfsr258() { // default destructor
      
      std::cout << "deleting lfsr258" << std::endl;
   }
   
   virtual void setState( std::vector<uint64_t> seed ) { // set the seeds
   
      assert( seed.size() >= N_SEEDS );
      
      // VERY IMPORTANT: The initial seeds _s1, _s2, _s3 MUST be larger than 1, 511, 4095, 131071, and 8388607 respectively
      _s[0] = seed[0]; if ( _s[0] <       2 ) _s[0] +=       2;
      _s[1] = seed[1]; if ( _s[1] <     512 ) _s[1] +=     512;
      _s[2] = seed[2]; if ( _s[2] <    4096 ) _s[2] +=    4096;
      _s[3] = seed[3]; if ( _s[3] <  131072 ) _s[3] +=  131072;
      _s[4] = seed[4]; if ( _s[4] < 8388608 ) _s[4] += 8388608;
   }
   
   virtual void getState( std::vector<uint64_t>& seed ) { // get the seed vector
      
      assert( seed.size() >= N_SEEDS );
      for ( size_t i = 0; i < N_SEEDS; i++ ) seed[i] = _s[i];
   }
   
   virtual void jump_ahead( uintmax_t n ) { // jump ahead the next n random numbers
      
      for ( size_t i = 0; i < N_SEEDS; i++ ) {
      
         Bitmatrix<uint64_t> A( MATRIX[i] );
         _s[i] = ( A^n ) * _s[i];
      }
   }
   
   virtual void jump_ahead( uintmax_t e, uintmax_t c ) {   // jump ahead the next n random numbers, where n = 2^e + c

      Bitmatrix<uint64_t> A, B;
      
      for ( size_t i = 0; i < N_SEEDS; i++ ) {
      
         if ( e ) {
            B = MATRIX[i];
            for ( uintmax_t j = 0; j < e; j++ ) B *= B;
         }
         A = MATRIX[i];
         A = A^c;
         if ( e ) A *= B;
         _s[i] = A * _s[i];
      }
   }
   
   virtual void jump_back( uintmax_t n ) { // jump ahead the next n random numbers
      
      for ( size_t i = 0; i < N_SEEDS; i++ ) {
      
         Bitmatrix<uint64_t> A( MATRIX_INV[i] );
         _s[i] = ( A^n ) * _s[i];
      }
   }
   
   virtual void jump_back( uintmax_t e, uintmax_t c ) {   // jump ahead the next n random numbers, where n = 2^e + c
   
      Bitmatrix<uint64_t> A, B;
      
      for ( size_t i = 0; i < N_SEEDS; i++ ) {
      
         if ( e ) {
            B = MATRIX_INV[i];
            for ( uintmax_t j = 0; j < e; j++ ) B *= B;
         }
         A = MATRIX_INV[i];
         A = A^c;
         if ( e ) A *= B;
         _s[i] = A * _s[i];
      }
   }
   
   virtual void jump_cycle( void ) { // jump ahead an entire cycle of lfsr258
   
      const uint32_t A = 63, B = 55, C = 52, D = 47, E = 41;
      jump_ahead( A + B + C + D + E, 0 );
      jump_back( B + C + D + E, 0 );
      jump_back( A + C + D + E, 0 );
      jump_back( A + B + D + E, 0 );
      jump_back( A + B + C + E, 0 );
      jump_back( A + B + C + D, 0 );
      jump_ahead( C + D + E, 0 );
      jump_ahead( B + D + E, 0 );
      jump_ahead( B + C + E, 0 );
      jump_ahead( B + C + D, 0 );
      jump_ahead( A + D + E, 0 );
      jump_ahead( A + C + E, 0 );
      jump_ahead( A + C + D, 0 );
      jump_ahead( A + B + E, 0 );
      jump_ahead( A + B + D, 0 );
      jump_ahead( A + B + C, 0 );
      jump_back( A + B, 0 );
      jump_back( A + C, 0 );
      jump_back( A + D, 0 );
      jump_back( A + E, 0 );
      jump_back( B + C, 0 );
      jump_back( B + D, 0 );
      jump_back( B + E, 0 );
      jump_back( C + D, 0 );
      jump_back( C + E, 0 );
      jump_back( D + E, 0 );
      jump_ahead( A, 0 );
      jump_ahead( B, 0 );
      jump_ahead( C, 0 );
      jump_ahead( D, 0 );
      jump_ahead( E, 0 );
      jump_back( 1 );
   }
/*
	virtual void jump_cycle( void ) { // jump ahead a full cycle of lfsr258
	
	   std::bitset<258> p( std::string( "111111111111111111111111111111111111111101111101111011011111111000000000000000000000000100001001001001010010010000100011111111111111111111101101111011011010110110110111110000000000000000000000001000000010010000100000011111111111111111111111111111111111111111" ) );
      for ( size_t i = 0; i < p.size(); ++i ) if ( p.test(i) ) jump_ahead( i, 0 );
	}
*/
   
   uint32_t rng32( void ) { // returns the next random number as a 32-bit integer

      static uint32_t u, l;
      static bool f = true;
      uint32_t n;
      uint64_t v;
   
      if ( f ) {
   
         v = rng64();
         l = ( uint32_t )( v >> 32 );
         u = ( uint32_t )( v );
         n = u;
      }
      else n = l;
   
      f = !f;
      return n;
   }
   
   uint64_t rng64( void ) { // returns the next random number as a 64-bit integer
   
      _s[0] = ( ( _s[0] & C1 ) << 10 ) ^ ( ( ( _s[0] <<  1 ) ^ _s[0] ) >> 53 );
      _s[1] = ( ( _s[1] & C2 ) <<  5 ) ^ ( ( ( _s[1] << 24 ) ^ _s[1] ) >> 50 );
      _s[2] = ( ( _s[2] & C3 ) << 29 ) ^ ( ( ( _s[2] <<  3 ) ^ _s[2] ) >> 23 );
      _s[3] = ( ( _s[3] & C4 ) << 23 ) ^ ( ( ( _s[3] <<  5 ) ^ _s[3] ) >> 24 );
      _s[4] = ( ( _s[4] & C5 ) <<  8 ) ^ ( ( ( _s[4] <<  3 ) ^ _s[4] ) >> 33 );
   
      return ( _s[0] ^ _s[1] ^ _s[2] ^ _s[3] ^ _s[4] ) & C0;
   }
   
   double rng32_01( void ) { // returns a random number in the half-open interval [0,1)
   
      return rng32() * TWO32_INV;
   }
   
   long double rng64_01( void ) { // returns a random number in the half-open interval [0,1)
   
      return rng64() * TWO64_INV;
   }
   
private:
   
   uint64_t _s[ N_SEEDS ];

}; // end lfsr258 class
} // end namespace LFSR258

#endif // LFSR258_H
